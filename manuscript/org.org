#-*- mode: org -*-
#+STARTUP: showall
#+TAGS: { @Core(c)  @Problem(p)}

* Introduction

* Java Memory Model
** Allocations
** Stack

* Object Pooling
  http://gameprogrammingpatterns.com/object-pool.html

  Object pools can be implemented in an automated fashion in languages
  like C++ via smart pointers. In the constructor of the smart pointer -
  an object can be requested from the pool and in the destructor of the
  smart pointer - the object can be released back to the pool.

  http://my.safaribooksonline.com/book/programming/java/9780137150021/creating-and-destroying-objects/ch02lev1sec5
  http://www.oracle.com/ru/corporate/events/quarter-four/virtual-machine-java-404173-ru.pdf

** TODO What is Pooling
** TODO When to use Pooling
** TODO Benefits
** TODO Recyling Strategies
*** TODO Borrowing
*** TODO Reference-counting
*** TODO Using lambda blocks
*** TODO Choosing the right one
** TODO Empty Pool Handling
   It is also possible to block and wait until someone else returns
*** TODO Fixed Size
*** TODO Tiny-Step growth
*** TODO Block Growth
*** TODO Shrinking
*** TODO Choosing the right one
** TODO Allocation Triggers
*** TODO Empty Pool Trigger
*** TODO Watermarks
*** TODO Lease/Return Rate
** TODO Lease Tracking
*** BitMask / Atomic Iteger
*** HashMap

** TODO Re-initialization
** TODO Pitfalls

* Waiting Strategies

* Networking
** Buffering
** Zero-copy

* Lock-free concurrency

* Profiling

* Approximate Data Structures

* JVM Flags
** Optimizing for number of threads
** Threads or ring buffer?

* Processing
** Batch
** Stream
